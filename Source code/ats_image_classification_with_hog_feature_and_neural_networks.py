# -*- coding: utf-8 -*-
"""ATS-Image-Classification-with-HOG-Feature-and-Neural-Networks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6BjPfO8IsD36R5RKsWoibFbLkhhoKFE

**1. Dataset Preparation**
"""

import matplotlib.pyplot as plt
from skimage.feature import hog
from sklearn import datasets
from mlxtend.data import loadlocal_mnist
from sklearn.neural_network import MLPClassifier

"""**Download MNIST dataset dan Extract gzip file**

"""

import torchvision.datasets as datasets

mnist_train = datasets.MNIST(root='../images/mnist-dataset', train=True, download=True)
mnist_test = datasets.MNIST(root='../images/mnist-dataset', train=False, download=True)

!ls ../images/mnist-dataset/

"""**Load image dataset**"""

train_images, train_labels = mnist_train.data, mnist_train.targets
test_images, test_labels = mnist_test.data, mnist_test.targets

mnist_test = datasets.MNIST(root='./data', train=False, download=True)
test_images, test_labels = mnist_test.data, mnist_test.targets

mnist_test = datasets.MNIST(root='./data', train=False, download=True)
images, labels = mnist_test.data, mnist_test.targets

plt.imshow(images[0], cmap='gray')

label_second = mnist.targets[1]
print(label_second)

"""**Test extract HOG feature from image**"""

feature, hog_img = hog(images[1].numpy(), orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True, block_norm='L2')
plt.imshow(hog_img, cmap='gray')
plt.title(f'Label: {labels[1]}')
plt.axis('off')
plt.show()

feature.shape

plt.bar(list(range(feature.shape[0])), feature)

feature, hog_img = hog(images[0].numpy(), orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True, block_norm='L2')
plt.imshow(hog_img, cmap='gray')
plt.title(f'Label: {labels[0]}')
plt.axis('off')
plt.show()

plt.bar(list(range(feature.shape[0])), feature)

"""**2. Preprocessing using HOG Feature Extraction**



"""

n_dims = feature.shape[0]

n_dims

n_samples = images.shape[0]

n_samples

"""**Create variable for dataset**"""

from sklearn.datasets import make_classification
n_features = 144
X_train, y_train = make_classification(n_samples=n_samples, n_features=n_features, n_informative=4, n_redundant=3, random_state=50)

X_train.shape

"""**Get HOG feature from each image & put into dataset variable**"""

for i in range(n_samples):
    features, _ = hog(images[i].numpy().reshape(28, 28), orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True, block_norm='L2')
    X_train[i] = features
    y_train[i] = labels[i].item()

"""**Convert categorical label to one hot label**"""

from sklearn.preprocessing import LabelBinarizer

lb = LabelBinarizer()

lb.fit(y_train)

y_train_one_hot = lb.transform(y_train)

y_train_one_hot

y_train_one_hot.shape

y_train_one_hot[0]

y_train[0]

import numpy as np

label = lb.inverse_transform(np.array([y_train_one_hot[0]]))

label[0]

"""**3. Classification with Neural Networks**"""

clf = MLPClassifier(hidden_layer_sizes=(128, 64, 10), solver='sgd', learning_rate_init=0.001, max_iter=100)

clf.fit(X_train, y_train_one_hot)

"""**4. Predict Test Dataset**"""

n_samples_test = test_images.shape[0]

X_test, y_test = make_classification(n_samples=n_samples, n_features=n_features, n_informative=2, n_redundant=0, random_state=42)

for i in range(n_samples):
    features, _ = hog(test_images[i].numpy().reshape(28, 28), orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True, block_norm='L2')
    X_test[i] = features
    y_test[i] = test_labels[i].item()

y_test_one_hot = lb.transform(y_test)

y_pred_one_hot = clf.predict(X_test)

y_pred = lb.inverse_transform(y_pred_one_hot)

y_pred

plt.imshow(test_images[20].reshape(28,28), cmap='gray')

out_one_hot = clf.predict(X_test[20].reshape(1, n_dims))

out_one_hot

out = lb.inverse_transform(out_one_hot.reshape(1,10))

out[0]

"""**5. Evaluation Metrics**

**5. 1 Confussion Matrix**
"""

from sklearn.metrics import confusion_matrix

conf_mat = confusion_matrix(y_test, y_pred)

conf_mat

from mlxtend.plotting import plot_confusion_matrix

class_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

fig, ax = plot_confusion_matrix(conf_mat=conf_mat, class_names=class_names)

"""**5.2 Precission**"""

from sklearn.metrics import precision_score

precision = precision_score(y_test, y_pred, average=None)

precision

"""**5.3 Recall**"""

from sklearn.metrics import recall_score

recall = recall_score(y_test, y_pred, average=None)

recall

"""**5.4 Accuracy**"""

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)

accuracy

"""**5.5 F1-Score**"""

from sklearn.metrics import f1_score

f1 = f1_score(y_test, y_pred, average='macro')

f1